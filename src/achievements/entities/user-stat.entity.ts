import { Entity, PrimaryColumn, Column, OneToOne, JoinColumn } from 'typeorm';
import { User } from '@/modules/user/entities/user.entity';

/**
 * Агрегированная статистика пользователя.
 * Хранит метрики, используемые для:
 * - Подсчёта достижений
 * - Управления страйками
 * - Начисления внутриигровой валюты
 * - Ограничения доступа (бесплатные пользователи)
 *
 * Все поля обновляются асинхронно при событиях: завершение урока, изучение слова, вход в приложение.
 * Не хранит сырые данные — только агрегированные значения для быстрой выборки.
 */
@Entity('user_stat')
export class UserStat {
  @PrimaryColumn({ type: 'integer' })
  userId: number;

  /**
   * Связь с пользователем. Обязательна для целостности.
   * При удалении пользователя — статистика также удаляется.
   */
  @OneToOne(() => User, (user) => user.stat, {
    onDelete: 'CASCADE',
  })
  @JoinColumn({ name: 'userId', referencedColumnName: 'id' })
  user: User;

  // =============================
  // 📚 ОБЩАЯ АКТИВНОСТЬ
  // =============================

  /**
   * Количество пройденных уроков.
   * Увеличивается при успешном завершении любого урока.
   */
  @Column({ type: 'integer', default: 0 })
  lessonsCompleted: number;

  /**
   * Количество выученных слов (статус "mastered" или выше).
   * Используется для достижений типа "выучил 50 слов".
   */
  @Column({ type: 'integer', default: 0 })
  wordsLearned: number;

  /**
   * Количество завершённых уроков по кана.
   * Используется для достижений типа "первый урок", "5 уроков подряд" и т.д.
   * Не связано с lesson_progress — ты генерируешь уроки на лету.
   */
  @Column({ type: 'integer', default: 0 })
  kanaLessonsCompleted: number;

  /**
   * Количество освоенных кана (все символы уровня N5/N4 и т.д.).
   * Используется для достижений типа "выучил все кана N5".
   */
  @Column({ type: 'integer', default: 0 })
  kanaMastered: number;

  /**
   * Количество освоенных канзи (по уровням).
   * Может использоваться в будущем для достижений по канзи.
   */
  @Column({ type: 'integer', default: 0 })
  kanjiMastered: number;

  // =============================
  // 🏆 СТРАЙКИ (СЕРИИ ДНЕЙ)
  // =============================

  /**
   * Текущая серия дней подряд, когда пользователь прошёл хотя бы один урок.
   * Сбрасывается до 1 при пропуске дня.
   * Используется для отображения текущего страйка на экране.
   *
   * Пример: 7 → "Вы на 7-м дне подряд!"
   */
  @Column({ type: 'integer', default: 0 })
  streakDays: number;

  /**
   * Максимальная серия дней подряд, которую пользователь когда-либо достиг.
   * Обновляется при завершении каждого нового страйка.
   * Используется в профиле: "Лучший страйк: 42 дня".
   *
   * Не сбрасывается! Только растёт.
   */
  @Column({ type: 'integer', default: 0 })
  maxStreak: number;

  /**
   * Последний день, когда пользователь прошёл хотя бы один урок.
   * Хранится как DATE (без времени), чтобы сравнивать дни, а не часы.
   *
   * Используется для:
   * - Определения, был ли вход сегодня
   * - Вычисления страйка
   * - Генерации календаря активности
   */
  @Column({ type: 'date', default: () => 'CURRENT_DATE' })
  lastActivityDate: Date;

  // =============================
  // 💰 ВНУТРИИГРОВАЯ ВАЛЮТА
  // =============================

  /**
   * Внутриигровая валюта (например, "Японские монеты").
   * Отличается от очков достижений — это отдельная экономика.
   * Начисляется за прохождение уроков:
   *   - excellent → +50
   *   - good → +30
   *   - pass → +10
   *   - fail → +0
   *
   * Может тратиться на:
   *   - Заморозку страйка
   *   - Разблокировку контента
   *   - Бустеры (например, "удвоить очки на 1 час")
   *
   * Позволяет создавать гибкую систему монетизации без реальных денег.
   */
  @Column({ type: 'integer', default: 0 })
  currency: number;

  /**
   * Количество "заморозок" — предметов инвентаря.
   * Одна заморозка = сохраняет текущий страйк при пропуске дня.
   * Покупается за валюту.
   *
   * Например: если пользователь пропустил день, но имеет 1 freezeToken — страйк не сбрасывается.
   */
  @Column({ type: 'integer', default: 0 })
  freezeTokens: number;

  // =============================
  // 🎯 ОЧКИ ДОСТИЖЕНИЙ (ОТДЕЛЬНАЯ ЭКОНОМИКА)
  // =============================

  /**
   * Общее количество очков, набранных за достижения.
   * Начисляется при получении достижений (например, +10 за "первое слово").
   * Не связано с валютой!
   * Используется для рейтинга, уровней, лидербордов.
   */
  @Column({ type: 'integer', default: 0 })
  totalPoints: number;

  /**
   * Очки, заработанные сегодня.
   * Используется для достижений типа "100 очков за день".
   * Сбрасывается каждый день в 00:00 UTC.
   */
  @Column({ type: 'integer', default: 0 })
  dailyPoints: number;

  // =============================
  // ⏱️ СИСТЕМНЫЕ ПОЛЯ
  // =============================

  /**
   * Дата и время последнего действия пользователя.
   * Используется для определения "активности", аналитики и синхронизации.
   * Обновляется при любом значимом действии: вход, завершение урока, изучение слова.
   */
  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })
  lastActivity: Date;

  /**
   * Когда запись была создана.
   * Для аудита и аналитики.
   */
  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })
  createdAt: Date;

  /**
   * Когда запись была последний раз обновлена.
   * Для синхронизации и кэширования.
   */
  @Column({
    type: 'timestamp',
    default: () => 'CURRENT_TIMESTAMP',
    onUpdate: 'CURRENT_TIMESTAMP',
  })
  updatedAt: Date;
}
