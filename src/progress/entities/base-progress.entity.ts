import {
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  JoinColumn,
  CreateDateColumn,
  UpdateDateColumn,
  BaseEntity,
} from 'typeorm';

import { User } from '@/user/entities/user.entity';

console.log('Загружается BaseProgress'); // <-- Временный лог

/**
 * Абстрактная базовая сущность для отслеживания прогресса.
 * Содержит общие поля, которые наследуются другими сущностями прогресса.
 */
export abstract class BaseProgress extends BaseEntity {
  /**
   * Уникальный идентификатор записи прогресса.
   * Генерируется автоматически базой данных.
   */
  @PrimaryGeneratedColumn()
  id: number;

  /**
   * Связь с пользователем, чей прогресс отслеживается.
   * При удалении пользователя, связанные записи прогресса также удаляются (CASCADE).
   * `eager: false` означает, что связанный объект User не будет автоматически
   * загружаться при выборке прогресса, если это явно не указано в запросе.
   * Это помогает избежать ненужной нагрузки на БД.
   */
  @ManyToOne(() => User, { onDelete: 'CASCADE', eager: false })
  @JoinColumn({ name: 'userId' })
  user: User;

  /**
   * Идентификатор пользователя.
   * Хранится как отдельный столбец для удобства запросов и индексации.
   */
  @Column()
  userId: number;

  /**
   * Процент изученности элемента (от 0 до 100).
   * 0 - элемент не начат, 100 - элемент полностью изучен/освоен.
   * Это основная метрика прогресса.
   */
  @Column({ type: 'integer', default: 0 })
  progress: number; // 0–100

  // --- Общие дополнительные поля для детализации прогресса ---

  /**
   * Количество успешных взаимодействий пользователя с элементом.
   * Например, правильные ответы в упражнениях или тестах.
   * Используется для расчета мастерства и алгоритмов повторения.
   */
  @Column({ type: 'integer', default: 0 })
  correctAttempts: number;

  /**
   * Количество неуспешных взаимодействий пользователя с элементом.
   * Например, ошибки в упражнениях или тестах.
   * Используется для корректировки уровня сложности и частоты повторений.
   */
  @Column({ type: 'integer', default: 0 })
  incorrectAttempts: number;

  /**
   * Субъективный уровень сложности, воспринимаемый пользователем или
   * определяемый системой для этого элемента.
   * Может использоваться алгоритмами SRS для корректировки интервалов повторения.
   * @example 1 - легко, 2 - нормально (по умолчанию), 3 - сложно, 4 - очень сложно
   */
  @Column({ type: 'integer', default: 2 })
  perceivedDifficulty: number; // 1-4

  /**
   * Дата и время, когда элемент должен быть повторен следующий раз.
   * Используется алгоритмами типа SRS (Spaced Repetition System).
   * Если NULL, элемент либо новый, либо не требует немедленного повторения.
   */
  @Column({ type: 'timestamp', nullable: true })
  nextReviewAt: Date | null;

  /**
   * Текущая стадия изучения элемента.
   * Позволяет отслеживать этапы взаимодействия пользователя с элементом.
   * - 'new': Элемент только что добавлен в программу изучения для пользователя.
   * - 'learning': Элемент активно изучается (например, вводится в активный словарь).
   * - 'review': Элемент изучен, но требует периодического повторения для закрепления.
   * - 'mastered': Элемент считается освоенным пользователем.
   */
  @Column({
    type: 'enum',
    enum: ['new', 'learning', 'review', 'mastered'],
    default: 'new',
  })
  stage: 'new' | 'learning' | 'review' | 'mastered';
  // --- Конец общих дополнительных полей ---

  /**
   * Дата и время создания записи о прогрессе.
   * Устанавливается автоматически при создании записи.
   */
  @CreateDateColumn()
  createdAt: Date;

  /**
   * Дата и время последнего обновления записи о прогрессе.
   * Устанавливается автоматически при любом изменении записи.
   * Используется, например, в алгоритмах SRS для определения "свежести" данных.
   */
  @UpdateDateColumn()
  updatedAt: Date;
}
