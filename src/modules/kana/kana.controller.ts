import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Req,
} from '@nestjs/common';
import { Request } from 'express';
import { AuthGuard } from 'nest-keycloak-connect';

import { KanaService } from './kana.service';
import { CreateKanaDto } from './dto/create-kana.dto';
import { UpdateKanaDto } from './dto/update-kana.dto';
import { KeycloakJwtPayload } from '@/modules/auth/interfaces/keycloak-payload.interface';
import { AuthService } from '@/modules/auth/auth.service';
import { SrsExerciseResultDto } from '@/services/srs.service';
import { CurrencyAndStreakService } from '@/services/currency-and-streak.service';
import { LessonFactoryService } from '@/modules/lesson/factory/lesson-factory.service';
import { GeneratedKanaLesson } from '@/modules/lesson/services/lesson.types';

@Controller('kana')
export class KanaController {
  constructor(
    private readonly kanaService: KanaService,
    private readonly authService: AuthService,
    private readonly currencyAndStreakService: CurrencyAndStreakService,
    private readonly lessonFactoryService: LessonFactoryService,
  ) {}

  @Post()
  create(@Body() createKanaDto: CreateKanaDto) {
    return this.kanaService.create(createKanaDto);
  }

  @Get()
  findAll() {
    return this.kanaService.getLessonPlan(1, 'hiragana');
  }

  @Get('hiragana/all')
  @UseGuards(AuthGuard)
  async findHiragana(@Req() req: Request) {
    const user = await this.authService.syncUserWithDatabase(
      req.user as KeycloakJwtPayload,
    );
    return this.kanaService.findSymbols('hiragana', user.id);
  }

  @Get('katakana/all')
  @UseGuards(AuthGuard)
  async findKatakana(@Req() req: Request) {
    const user = await this.authService.syncUserWithDatabase(
      req.user as KeycloakJwtPayload,
    );
    return this.kanaService.findSymbols('katakana', user.id);
  }

  @Get('lesson/:type/:id')
  async findOne(
    @Param('id') id: string,
    @Param('type') typeKana: 'hiragana' | 'katakana',
  ) {
    const config = {
      includeCombinations: true,
    };
    const lesson =
      await this.lessonFactoryService.getLesson<GeneratedKanaLesson>('kana', {
        id,
        typeKana,
        config,
      });
    return lesson.data;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ SRS-–ª–æ–≥–∏–∫–∏.
   * –ó–∞–º–µ–Ω–∏ —ç—Ç—É –∑–∞–≥–ª—É—à–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∫ SrsService.
   */
  private calculateRewardFromSrs(results: SrsExerciseResultDto[]): number {
    if (results.length === 0) return 0;

    const correctCount = results.filter((r) => r.isCorrect).length;
    const accuracy = correctCount / results.length;

    // üëá –¢–í–û–Ø –õ–û–ì–ò–ö–ê –ù–ê–ì–†–ê–î–´ ‚Äî —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏!
    if (accuracy >= 0.95) return 50; // –ø–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ
    if (accuracy >= 0.8) return 30; // —Ö–æ—Ä–æ—à–æ
    if (accuracy >= 0.6) return 10; // –ø—Ä–æ—à—ë–ª
    return 0; // –Ω–µ—É–¥–∞—á–∞
  }

  @Post('lessons/complete/:id')
  async completeLesson(
    @Param('id') id: number,
    @Body('results') results: SrsExerciseResultDto[],
    @Req() req: Request,
  ): Promise<{ success: boolean; message: string }> {
    const user = req.user as KeycloakJwtPayload;
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      for (const result of results) {
        await this.kanaService.updateProgress(id, result);
      }

      // üî• –ù–û–í–´–ô –®–ê–ì: –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —á–µ—Ä–µ–∑ SRS-–ª–æ–≥–∏–∫—É
      // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É —Ç–µ–±—è –µ—Å—Ç—å –º–µ—Ç–æ–¥: SrsService.getRewardForItem(...)
      // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–π rewardAmount = 10 –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
      const rewardAmount = this.calculateRewardFromSrs(results); // ‚Üê –¢–í–û–Ø –õ–û–ì–ò–ö–ê!

      // üî• –û–î–ò–ù –í–´–ó–û–í ‚Äî –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–∏—Å
      await this.currencyAndStreakService.markKanaLessonCompleted(
        id,
        rewardAmount,
      );

      await this.lessonFactoryService.completeLesson({
        userKeycloakId: String(user.sub),
      });

      return {
        success: true,
        message: '–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      };
    } catch (error) {
      console.error('Error completing lesson:', error);
      throw error;
    }
  }

  @Patch(':id')
  update(@Param('id') id: string, @Body() updateKanaDto: UpdateKanaDto) {
    return this.kanaService.update(+id, updateKanaDto);
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.kanaService.remove(+id);
  }
}
